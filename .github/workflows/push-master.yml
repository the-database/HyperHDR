name: HyperHDR CI Build (Windows only)

on:
  push:

env:
  USE_CACHE: ${{ vars.USE_CACHE && vars.USE_CACHE || true }}
  RESET_CACHE: ${{ vars.RESET_CACHE && vars.RESET_CACHE || false }}

jobs:
  windows:
    name: Windows
    runs-on: windows-2022
    env:
      MSVC: 2022
      QT_VERSION: 6.8.3
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
        with:
          submodules: true

      - name: Cache Qt
        uses: actions/cache@v4.2.4
        id: cache-qt-windows
        with:
          path: ${{ runner.workspace }}/Qt
          key: ${{ runner.os }}-Qt.${{ env.QT_VERSION }}

      - name: Setup CMake
        uses: lukka/get-cmake@latest
        with:
          cmakeVersion: 3.27.9

      # temporary workaround for aqt: Python 3.13 instead of preinstalled default older version
      - name: Python 3.13 for aqtinstall
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install QT
        if: steps.cache-qt-windows.outputs.cache-hit != 'true'
        run: |
          pip install aqtinstall
          aqt install-qt -O ${{ runner.workspace }}/Qt windows desktop ${{ env.QT_VERSION }} win64_msvc${{ env.MSVC }}_64 -m qtserialport

      # Generate cache id
      - name: Prepare ccache timestamp
        if: env.USE_CACHE == 'true'
        id: ccache_cache_timestamp
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y-%m-%d-%H-%M-%S" UTC)
          file(APPEND "$ENV{GITHUB_OUTPUT}" "timestamp=${current_date}")

      # Download cache
      - name: Download ccache files
        if: env.USE_CACHE == 'true'
        uses: actions/cache@v4.2.4
        with:
          path: build/.ccache
          key: ${{ runner.os }}-ccache-${{ steps.ccache_cache_timestamp.outputs.timestamp }}
          restore-keys: ${{ runner.os }}-ccache

      - name: Clear branch ccache storage
        uses: yumemi-inc/clean-cache-action@v1
        continue-on-error: true
        with:
          ref: ${{ github.event.ref }}
          key: ${{ runner.os }}-ccache

      - name: Install TurboJPEG
        shell: powershell
        run: |
          Invoke-WebRequest -Method Get -Uri https://github.com/libjpeg-turbo/libjpeg-turbo/releases/download/3.0.3/libjpeg-turbo-3.0.3-vc64.exe -OutFile turbojpeg.exe -UseBasicParsing
          Start-Process -Wait turbojpeg.exe -ArgumentList "/S"

      - name: Download CCache
        shell: powershell
        run: |
          Invoke-WebRequest -Method Get -Uri https://github.com/ccache/ccache/releases/download/v4.11.3/ccache-4.11.3-windows-x86_64.zip -OutFile ccache.zip -UseBasicParsing

      - name: Install CCache
        shell: cmd
        run: |
          7z e ccache.zip -o.\build *.exe -r

      - name: Build packages
        env:
          PLATFORM: windows
          VCINSTALLDIR: 'C:/Program Files/Microsoft Visual Studio/${{ env.MSVC }}/Enterprise/VC'
          CMAKE_PREFIX_PATH: "${{ runner.workspace }}/Qt/${{ env.QT_VERSION }}/msvc${{ env.MSVC }}_64/lib/cmake/"
          USE_CCACHE: ${{ env.USE_CACHE }}
        shell: bash
        run: |
          "${{env.VCINSTALLDIR}}/Auxiliary/Build/vcvars64.bat"
          ./build.sh

      # Upload artifacts (only on tagged commit)
      - name: Upload artifacts
        if: startsWith(github.event.ref, 'refs/tags') && github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4.6.2
        with:
          name: release-artifact-windows
          path: build/Hyper*

      # Upload artifacts from commit
      - name: Upload artifacts from commit
        if: (startsWith(github.event.ref, 'refs/tags') != true) && github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4.6.2
        with:
          name: Windows_x64_setup
          path: build/Hyper*.exe
